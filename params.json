{"name":"Data Management","tagline":"Android Local Database Library for Easily Storing Objects","body":"Android Local Database Library for Easily Storing Objects\r\n---------------------------------------------------------------\r\n\r\nDataManagement is a Java Android library designed to help easily and efficiently store aggregate classes to an SQLite database.  It eliminates the need to write separate classes to manage database – object interactions and allows developers to use simple methods to store, query, update, and delete objects. The library is capable of storing all objects of classes whose instance variables are either primitive data types or are themselves objects of another storable class.\r\nThe DataManagement Library condenses many standard database features into several simple methods:\r\n\r\nExamples:\r\n---------------------------------------------------------------\r\n###Creating a Storable Class:\r\n\r\n\tpublic class StorableClass{\r\n\t\t@Id\r\n\t\tprivate int ident;\r\n\t\tprivate int num1;\r\n\t\tprivate double num2;\r\n\t\tprivate String num3;\r\n\t\tprivate boolean num4;\r\n\t\tpublic static final int num5 = 3;\r\n\t\tprivate Collection<OtherStorableClass> col;\r\n\t}\r\nA storable class must meet three requirements. First, the class must have a private instance variable of type int that will be used as the id number of the object. This variable may be read by the application, but the application should not have the capability to write to or change this variable in anyway. This variable is identified by the system with an @Id annotation. In addition, the class should not have any instance variables that are not either primitive types, strings, or other storable objects. Finally, the class must have an empty constructor.\r\n\r\n###Instantiating a DataManager Object:\r\n\r\n\tDataManager dm = DataManager.newInstance(context);\r\nThe static constructor accepts the calling Context that is going to use the database. Usually this should be the calling Activity.\r\n\r\n###Opening a Database for Use:\r\n\r\n\tdm.open();\r\nThis method must be called before the database is used in any way.\r\n\r\n###Closing a Database After Use:\r\n\r\n\tdm.close();\r\nThis method should be called after all database operations have been performed.\r\n\r\n###Adding an Object to the Database:\r\n\r\n\tStorableClass myObj = new StorableClass();\r\n\tint id = dm.add(myObj);\r\nThe add method accepts an object of a storable class as its only parameter and adds it to the database. It returns its id in the database for future use.\r\n\r\n###Retrieving a Specific Item from the Database by ID:\r\n\r\n\tStorableClass storableObject = dm.get(StorableClass.class, id);\r\nThe get method accepts two parameters: the data type of the stored object and the Id number of the object (the return value of the add method).\r\n\r\n###Retrieving All Objects of a Given Type Stored in the Database as a Collection:\r\n\r\n\tstorableObjectCollection = dm.getAll(StorableClass.class);\r\nThe getAll method’s only parameter is the class of the objects that should be retrieved.\r\n\r\n###Retrieving a Collection of Storable Objects that match a given criteria:\r\n\r\n\tCollection<StorableClass> storableObjectCollection = dm.find(StorableClass.class, 5, \"num1\");\r\nThe find method accepts three parameters: the data type of the stored object, the value that is being searched for, and the name of the instance variable as a string. This method is overloaded in such a way that the second parameter may be any primitive value or a string.\r\n\r\n###Updating an Object in the Database:\r\n\r\n\tdm.update(id, updatedObject);\r\nThe update method accepts two parameters: The id number of the object being updated and the updated object that will replace the existing one I the database. If the id number of the new object and the id number given as the first parameter do not match, the object’s id will be overwritten.\r\n\r\n###Deleting an Object by its Id number:\r\n\r\n\tdm.delete(StorableClass.class, id);\r\nThe delete method accepts two parameters: The data type and id number of the object to be deleted.\r\n\r\nAdditional Notes:\r\n-----------------------------------------\r\nId numbers are used by the database to ensure that objects are put in the correct place and to allow the program to access these objects. It is important that programs using this library do not attempt to set these variables as they will be initialized and managed by the library. These id numbers are unique for objects of a given type; objects of different types may have the same id number. In addition, if objects are deleted from the database their id numbers are left empty and are not reused. Another important note is that Strings are considered primitves for the purposes of this library. Thus, for instance, an ArrayList of Strings cannot currently be stored directly since they do not have id numbers. This can be accomplished by creating a simple wrapper class.\r\n\r\nContact Us:\r\n-----------------------------------------\r\nIf you have any questions or comments about this library feel free to email us at contactus@epsilonlabsllc.com\r\n\r\nLicensing:\r\n-----------------------------------------\r\nDataManagement is Currently Licensed under the GNU General Public License, version 3 (GPL-3.0). It is intended for open source use by anyone who would like to use it.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}